//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gridEntity { get { return GetGroup(GameMatcher.Grid).GetSingleEntity(); } }
    public Features.Components.GridComponent grid { get { return gridEntity.grid; } }
    public bool hasGrid { get { return gridEntity != null; } }

    public GameEntity SetGrid(bool[,] newValue) {
        if (hasGrid) {
            throw new Entitas.EntitasException("Could not set Grid!\n" + this + " already has an entity with Features.Components.GridComponent!",
                "You should check if the context already has a gridEntity before setting it or use context.ReplaceGrid().");
        }
        var entity = CreateEntity();
        entity.AddGrid(newValue);
        return entity;
    }

    public void ReplaceGrid(bool[,] newValue) {
        var entity = gridEntity;
        if (entity == null) {
            entity = SetGrid(newValue);
        } else {
            entity.ReplaceGrid(newValue);
        }
    }

    public void RemoveGrid() {
        gridEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Features.Components.GridComponent grid { get { return (Features.Components.GridComponent)GetComponent(GameComponentsLookup.Grid); } }
    public bool hasGrid { get { return HasComponent(GameComponentsLookup.Grid); } }

    public void AddGrid(bool[,] newValue) {
        var index = GameComponentsLookup.Grid;
        var component = (Features.Components.GridComponent)CreateComponent(index, typeof(Features.Components.GridComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGrid(bool[,] newValue) {
        var index = GameComponentsLookup.Grid;
        var component = (Features.Components.GridComponent)CreateComponent(index, typeof(Features.Components.GridComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGrid() {
        RemoveComponent(GameComponentsLookup.Grid);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGrid;

    public static Entitas.IMatcher<GameEntity> Grid {
        get {
            if (_matcherGrid == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Grid);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGrid = matcher;
            }

            return _matcherGrid;
        }
    }
}
